const { Telegraf } = require('telegraf');
const TonWeb = require('tonweb');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON API
const tonweb = new TonWeb(new TonWeb.HttpProvider('https://toncenter.com/api/v2/jsonRPC')); 

// –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const bot = new Telegraf('Y2200993779:AAF-UkIQjh66kFzY3lCAel4PKvW4SXexrVA');

// –ê–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
const contractAddress = '0QBwe6Suus0noEtPvbDe-bJkgtqr9PH2juttqqeg-yaSZTKs';

bot.command('mine', async (ctx) => {
    try {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞
        const result = await tonweb.sendTransaction({
            address: contractAddress,
            amount: 0.01 * 1e9, // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ (–ø—Ä–∏–º–µ—Ä)
            payload: 'mine'
        });

        ctx.reply('üõ†Ô∏è –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å.');
    } catch (error) {
        ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞: ' + error.message);
    }
});

bot.command('balance', async (ctx) => {
    try {
        const balance = await tonweb.getBalance(contractAddress);
        ctx.reply(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${balance / 1e9} TON`);
    } catch (error) {
        ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.');
    }
});

bot.launch();
console.log('–ë–æ—Ç —Å–≤—è–∑–∞–Ω —Å TON!');
